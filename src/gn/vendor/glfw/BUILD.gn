# Copyright 2017 the Volcano Authors. All rights reserved.
# Licensed under the GPL v3.
import("//src/gn/vendor/subgnDefines.gni")

glfw = rebase_path(volcano_prefix + "vendor/glfw", ".",
                   rebase_path(target_out_dir, root_build_dir)) + "/"

config("glfw_config") {
  if (is_android || is_mac || is_ios || is_tvos || is_linux) {
    defines = [ "_GLFW_X11" ]
  } else if (is_mac) {
    defines = [
      "_GLFW_COCOA",
      "_GLFW_USE_RETINA",
    ]
  } else if (is_win) {
    defines = [ "_GLFW_WIN32" ]
  }
  include_dirs = [
    glfw + "include",
    glfw + "deps",
  ]
}

config("glfw_local_config") {
  if (!is_win) {
    cflags = [
      "-Wno-sign-compare",
      "-Wno-unused-parameter",
      "-Wno-missing-field-initializers",
    ]
  }
}

source_set("glfw") {
  deps = [ "../vulkansamples:vulkan_headers" ]

  defines = [
    "_GLFW_BUILD_DLL",
    "__GLFW_USE_HYBRID_HPG",
  ]

  sources = [
    glfw + "src/context.c",
    glfw + "src/init.c",
    glfw + "src/input.c",
    glfw + "src/monitor.c",
    glfw + "src/vulkan.c",
    glfw + "src/window.c",

    glfw + "deps/glad.c",
    glfw + "deps/getopt.c",
  ]

  if (is_mac) {
    libs = [
      "Cocoa.framework",
      "CoreFoundation.framework",
      "CoreGraphics.framework",
      "CoreVideo.framework",
      "IOKit.framework",
      "OpenGL.framework",
    ]

    sources += [
      glfw + "src/cocoa_init.m",
      glfw + "src/cocoa_joystick.m",
      glfw + "src/cocoa_monitor.m",
      glfw + "src/cocoa_window.m",
      glfw + "src/cocoa_time.c",
      glfw + "src/posix_thread.c",
      glfw + "src/nsgl_context.m",
      glfw + "src/egl_context.m",
      glfw + "src/osmesa_context.c",
    ]
  } else if (is_android || is_mac || is_ios || is_tvos || is_linux) {
    defines += [
      "_GLFW_X11",
    ]

    libs = [
      "dl",
      "X11",
      "Xinerama",
      "Xcursor",
      "Xrandr",
    ]

    sources += [
      glfw + "src/x11_init.c",
      glfw + "src/x11_monitor.c",
      glfw + "src/x11_window.c",
      glfw + "src/xkb_unicode.c",
      glfw + "src/posix_time.c",
      glfw + "src/posix_thread.c",
      glfw + "src/glx_context.c",
      glfw + "src/egl_context.c",
      glfw + "src/osmesa_context.c",
    ]
    if (is_linux) {
      sources += [ glfw + "src/linux_joystick.c" ]
    } else {
      sources += [ glfw + "src/null_joystick.c" ]
    }
  } else if (is_win) {
    libs = [
      "gdi32.lib",
      "user32.lib",
      "opengl32.lib",
      "shell32.lib",
    ]

    sources += [
      glfw + "src/win32_init.c",
      glfw + "src/win32_joystick.c",
      glfw + "src/win32_monitor.c",
      glfw + "src/win32_time.c",
      glfw + "src/win32_thread.c",
      glfw + "src/win32_window.c",
      glfw + "src/wgl_context.c",
      glfw + "src/egl_context.c",
      glfw + "src/osmesa_context.c",
    ]
  }

  configs += [ ":glfw_local_config" ]
  all_dependent_configs = [ ":glfw_config" ]
}
